VARIE PRESE DA R INFERNO

PAGINA 28:

il corpo di una funzione deve essere una singola espressione, le parentesi graffe che lo racchiudono hanno proprio il compito di trasformare un numero di espressioni in un'unica singola espressione combinata. Quando infatti il corpo della funzione è costituito da una singola espressione queste non sono più necessarie.


pagina 28:

approccio alla scrittura di funzioni ----> scrivere diverse funzioni piccole separate e poi combinarle in modo tale da spezzare il processo in diversi passaggi.

pagina 28:

l'ultimo oggetto in una funzione è restituito, per evitare ciò, qualora lo si voglia, è possibile utilizzare la funzione return().

pagina 28 SIDE EFFECT:
una funzione può avere side effect, che è un cambiamento del sistema piuttosto che ottenere un valore.


http://en.wikipedia.org/wiki/Side_effect_(computer_science)


PAGINA 29
IL niente è importante, infatti i vettori possono avere lunghezza zero.


atomic vector può avere come attributo solo "names" ecco un altro motivo perché atomic

PAGINA 35:
<<- l'uso del global assignement è sconsigliato perché produce produce side effects anche in funzioni pensato appositamente per avere tali effetti.


PAGINA 38:

FUNZIONE generica ---> guarda all'attributo class del loro primo argomento ---> se l'argomento ha una class la funzione guarda al particolare method per quella classe ---> se esiste questa corrispondenza il metodo scelto è usato ----> se non c'è corrispondenza è usato il metodo di default.



PAGINA 39

scrivere nome funzione per vederne il corpo se esce UseMethod, posso usare getS3method("nome", "metodo"), per vedere invece tutti i metodi per la funzione, quindi tutti i possibili secondi argomenti della funzione precedente posso usare methods(<funzione>)



PAGINA: 55
match() e which() fanno la stessa cosa solo che match si ferma al primo elemento mentre which tutti.


PAGINA 58-59
cat e print. Cat interpreta comunque la stringa che ha come argomento, perché alcuni caratteri sono speciali e possono essere interpretati. Si veda ?Quote. Si consideri il seguente esempio. Una volta interpretato \t indica un tab e non una semplice stringa. La interpretazione avviene anche perché ad esempio la nuova linea nella funzione print è data da \n.

> x
[1] "\t"
> cat(x)
	
> print(x)
[1] "\t"


PAGINA 60: Backtick (o backquote)
serve per definire il nome di un oggetto che rompe le normali convenzioni per i nomi.
Ad esempio non si può nominare un oggetto 

> 1232 <- "prova"
Error in 1232 <- "prova" : invalid (do_set) left-hand side to assignment

ma neanche 

> "1232" <- "prova"
> "1232"
[1] "1232"

con il backtick si può

> `1232` <- "prova"
> `1232`
[1] "prova"

