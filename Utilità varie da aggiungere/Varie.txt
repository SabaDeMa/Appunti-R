
available.packages() 

per vedere il numero di pacchetti disponibili ed altre informazioni.


Nel subsetting di un data frame se l'oggetto è

> class(df1)
[1] "data.frame"
> class(dt)
[1] "data.table" "data.frame"

Semplicemente und data frame posso selezionare colonne con df1[ , "Nome" ], mentre con data.table data.frame posso evitare le virgolette dt[ , Nome ].



applicare più funzioni:

sapply(df,function(x) list(mean=mean(x),sd=sd(x),var=var(x)))






applicare più funzioni altro approccio:

multi.fun <- function(x) {
      c(min = min(x), mean = mean(x), max = max(x))
}

It gives the following result for cars data set:

> sapply(cars, multi.fun)
     speed   dist
min    4.0   2.00
mean  15.4  42.98
max   25.0 120.00

However, when I work in interactive mode I would prefer to have a function that would accept multiple functions as arguments. I came up with the following solution to this problem:

multi.sapply <- function(...) {
      arglist <- match.call(expand.dots = FALSE)$...
      var.names <- sapply(arglist, deparse)
      has.name <- (names(arglist) != "")
      var.names[has.name] <- names(arglist)[has.name]
      arglist <- lapply(arglist, eval.parent, n = 2)
      x <- arglist[[1]]
      arglist[[1]] <- NULL
      result <- sapply(arglist, function (FUN, x) sapply(x, FUN), x)
      colnames(result) <- var.names[-1]
      return(result)
}




any() posso aggiungere delle condizioni a questa funzione e verificare che almeno un elemento dell'oggetto che gli passo, soddisfi la condizione. Ritorna un vettore TRUE/FALSE con un solo elemento.

all() dato un vettore logico, sono tutti gli elementi veri o falsi?






note su subset prese da Wickham
http://adv-r.had.co.nz/Computing-on-the-language.html

paragrafo Non-standard evaluation in subset

:

subset() is special because it implements different scoping rules: the expressions a >= 4 or b == c are evaluated in the specified data frame rather than in the current or global environments. This is the essence of non-standard evaluation.

How does subset() work? We’ve already seen how to capture an argument’s expression rather than its result, so we just need to figure out how to evaluate that expression in the right context. Specifically, we want x to be interpreted as sample_df$x, not globalenv()$x. To do this, we need eval(). This function takes an expression and evaluates it in the specified environment.





# funzione intersect per verificare elementi comuni in due oggetti.



# si noti la differenza tra . e $

> pr <- c("a-1", "ab1", "andc1", "a?1")
> pr[5] <- "aadd"
> grep("d$", pr, value = TRUE)
[1] "aadd"
> grep(".d", pr, value = TRUE)
[1] "andc1" "aadd"




### FUNZIONE all.equal() funziona come identical se è vera l'ipotesi che gli oggetti sono uguali, ma se sono diversi mi restituisce informazioni sulla differenza.



comando

R.version.string

permette di vedere la versione di R, in effetti mostra solo una piccola parte del più generale sessionInfo()